{
  "hash": "1583ddf88b9cbaf7d1f8b7ca1ed7fccb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Blog Post 7\"\nauthor: \"Kasliwal, Dakshesh; Laz, Thomas; Li, Siyan; Oh, Yunha; Xia, Chuancheng\"\ndate: \"2025-04-22\"\ndate-modified: \"2025-04-22\"\ndraft: FALSE\n---\n\n\n\nFor this blog post, we created a basic form of our interactive. This interactive component allows users to explore HIV/AIDS-related data across New York City by borough and neighborhood. Users can filter the data by year, sex, and race/ethnicity through intuitive drop-down menus, making it easy to examine disparities across different demographic groups and time periods. Additionally, users can toggle between different metrics, such as HIV diagnoses rate and AIDS diagnoses rate, to gain a more comprehensive understanding of how these factors intersect. This component is highly effective because it presents complex public health data in a visually engaging and geographically contextualized manner, enabling deeper insight into spatial and demographic patterns of health inequality in NYC.\n\nBelow is the code we used for the interactive. First, we loaded all necessary packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages(library(shiny))\nsuppressPackageStartupMessages(library(leaflet))\nsuppressPackageStartupMessages(library(dplyr))\nsuppressPackageStartupMessages(library(sf))\nsuppressPackageStartupMessages(library(readr))\nsuppressPackageStartupMessages(library(stringr))\n```\n:::\n\n\n\nNext, we loaded in our main dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhiv_data <- read_rds(\"dataset/hiv_clean.rds\") |>\n  mutate(\n    neighborhood = str_remove(`Neighborhood (U.H.F)`, \"\\\\s*\\\\d{3}$\"),\n    sex = SEX,\n    race_ethnicity = `RACE/ETHNICITY`,\n    year = YEAR,\n    hiv_rate = `HIV DIAGNOSES PER 100,000 POPULATION`,\n    aids_rate = `AIDS DIAGNOSES PER 100,000 POPULATION`\n  )\n\nnyc_geo <- st_read(\"dataset/NYC_geography-master/NYC_geography-master/UHF42.geo.json\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `UHF42.geo' from data source \n  `/home/tvlaz/MA415/ma4615-sp25-final-project-team-5/dataset/NYC_geography-master/NYC_geography-master/UHF42.geo.json' \n  using driver `GeoJSON'\nSimple feature collection with 43 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -74.25589 ymin: 40.49593 xmax: -73.70027 ymax: 40.91577\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\nBelow is the code for creating our ui.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# UI\nui <- fluidPage(\n  titlePanel(\"NYC HIV/AIDS Map Explorer\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"year\", \"Year\", choices = unique(hiv_data$year)),\n      selectInput(\"sex\", \"Sex\", choices = unique(hiv_data$sex)),\n      selectInput(\"race\", \"Race/Ethnicity\", choices = unique(hiv_data$race_ethnicity)),\n      selectInput(\"metric\", \"Metric\",\n                  choices = c(\"HIV Diagnosis Rate\" = \"hiv_rate\",\n                              \"AIDS Diagnosis Rate\" = \"aids_rate\"))\n    ),\n    mainPanel(\n      leafletOutput(\"map\", height = 600)\n    )\n  )\n)\n```\n:::\n\n\n\nBelow is the server code.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Server\nserver <- function(input, output, session) {\n  filtered_data <- reactive({\n    hiv_data |>\n      filter(\n        year == input$year,\n        sex == input$sex,\n        race_ethnicity == input$race\n      )\n  })\n\n  output$map <- renderLeaflet({\n  data <- filtered_data()\n  \n  if (nrow(data) == 0 || all(is.na(data[[input$metric]]))) {\n    leaflet() |>\n      addProviderTiles(\"CartoDB.Positron\") |>\n      addControl(\"No data available for this selection.\", position = \"topright\")\n  } else {\n    merged <- nyc_geo |>\n      left_join(data, by = c(\"GEONAME\" = \"neighborhood\"))\n\n    pal <- colorNumeric(\"YlOrRd\", domain = merged[[input$metric]])\n\n    leaflet(merged) |>\n      addProviderTiles(\"CartoDB.Positron\") |>\n      addPolygons(\n        fillColor = ~pal(get(input$metric)),\n        color = \"#444444\",\n        weight = 1,\n        fillOpacity = 0.7,\n        label = ~paste0(\n          \"<strong>\", GEONAME, \"</strong><br>\",\n          gsub(\"_\", \" \", input$metric), \": \",\n          round(get(input$metric), 1)\n        ) %>% lapply(htmltools::HTML),\n        highlightOptions = highlightOptions(weight = 2, color = \"#666\", fillOpacity = 0.9, bringToFront = TRUE)\n      ) |>\n      addLegend(pal = pal, values = ~get(input$metric),\n                title = gsub(\"_\", \" \", input$metric),\n                position = \"bottomright\")\n  }\n})\n}\n```\n:::\n\n\n\nFinally, we can run the code.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(ui, server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
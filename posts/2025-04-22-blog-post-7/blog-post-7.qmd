---
title: "Blog Post 7"
author: "Kasliwal, Dakshesh; Laz, Thomas; Li, Siyan; Oh, Yunha; Xia, Chuancheng"
date: "2025-04-22"
date-modified: "2025-04-22"
draft: FALSE
---

For this blog post, we created a basic form of our interactive. This interactive component allows users to explore HIV/AIDS-related data across New York City by borough and neighborhood. Users can filter the data by year, sex, and race/ethnicity through intuitive drop-down menus, making it easy to examine disparities across different demographic groups and time periods. Additionally, users can toggle between different metrics, such as HIV diagnoses rate and AIDS diagnoses rate, to gain a more comprehensive understanding of how these factors intersect. This component is highly effective because it presents complex public health data in a visually engaging and geographically contextualized manner, enabling deeper insight into spatial and demographic patterns of health inequality in NYC.

Below is the code for creating our ui, server, and creating the app.

```{shinylive-r}
suppressPackageStartupMessages(library(shiny))
suppressPackageStartupMessages(library(leaflet))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(sf))
suppressPackageStartupMessages(library(readr))
suppressPackageStartupMessages(library(stringr))

hiv_data <- read_rds("dataset/hiv_clean.rds") |>
  mutate(
    neighborhood = str_remove(`Neighborhood (U.H.F)`, "\\s*\\d{3}$"),
    sex = SEX,
    race_ethnicity = `RACE/ETHNICITY`,
    year = YEAR,
    hiv_rate = `HIV DIAGNOSES PER 100,000 POPULATION`,
    aids_rate = `AIDS DIAGNOSES PER 100,000 POPULATION`
  )

nyc_geo <- st_read("dataset/NYC_geography-master/NYC_geography-master/UHF42.geo.json")

# UI
ui <- fluidPage(
  titlePanel("NYC HIV/AIDS Map Explorer"),
  sidebarLayout(
    sidebarPanel(
      selectInput("year", "Year", choices = unique(hiv_data$year)),
      selectInput("sex", "Sex", choices = unique(hiv_data$sex)),
      selectInput("race", "Race/Ethnicity", choices = unique(hiv_data$race_ethnicity)),
      selectInput("metric", "Metric",
                  choices = c("HIV Diagnosis Rate" = "hiv_rate",
                              "AIDS Diagnosis Rate" = "aids_rate"))
    ),
    mainPanel(
      leafletOutput("map", height = 600)
    )
  )
)

# Server
server <- function(input, output, session) {
  filtered_data <- reactive({
    hiv_data |>
      filter(
        year == input$year,
        sex == input$sex,
        race_ethnicity == input$race
      )
  })

  output$map <- renderLeaflet({
  data <- filtered_data()
  
  if (nrow(data) == 0 || all(is.na(data[[input$metric]]))) {
    leaflet() |>
      addProviderTiles("CartoDB.Positron") |>
      addControl("No data available for this selection.", position = "topright")
  } else {
    merged <- nyc_geo |>
      left_join(data, by = c("GEONAME" = "neighborhood"))

    pal <- colorNumeric("YlOrRd", domain = merged[[input$metric]])

    leaflet(merged) |>
      addProviderTiles("CartoDB.Positron") |>
      addPolygons(
        fillColor = ~pal(get(input$metric)),
        color = "#444444",
        weight = 1,
        fillOpacity = 0.7,
        label = ~paste0(
          "<strong>", GEONAME, "</strong><br>",
          gsub("_", " ", input$metric), ": ",
          round(get(input$metric), 1)
        ) %>% lapply(htmltools::HTML),
        highlightOptions = highlightOptions(weight = 2, color = "#666", fillOpacity = 0.9, bringToFront = TRUE)
      ) |>
      addLegend(pal = pal, values = ~get(input$metric),
                title = gsub("_", " ", input$metric),
                position = "bottomright")
  }
})
}

shinyApp(ui, server)
```


